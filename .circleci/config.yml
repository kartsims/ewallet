version: 2


presets:
  defaults: &defaults
    working_directory: ~/src
    docker:
      - image: omisegoimages/ewallet-builder:stable
    environment:
      IMAGE_NAME: "omisego/ewallet"

  restore_repo: &restore_repo
    restore_cache:
      name: Restoring repository
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}-
        - v1-repo-

  restore_ewallet_deps: &restore_ewallet_deps
    restore_cache:
      name: Restoring eWallet dependencies from cache
      keys:
        - v1-ewallet-deps-{{ checksum "mix.lock" }}
        - v1-ewallet-deps-

  restore_ewallet_assets_deps: &restore_ewallet_assets_deps
    restore_cache:
      name: Restoring eWallet assets dependencies from cache
      keys:
        - v1-ewallet-assets-deps-{{ checksum "apps/admin_panel/assets/yarn.lock" }}
        - v1-ewallet-assets-deps-

  restore_ewallet_test_build: &restore_ewallet_test_build
    restore_cache:
      name: Restoring eWallet test artifacts from cache
      keys:
        - v1-ewallet-test-build-{{ checksum "mix.exs" }}
        - v1-ewallet-test-build-

  restore_ewallet_prod_build: &restore_ewallet_prod_build
    restore_cache:
      name: Restoring eWallet production artifacts from cache
      keys:
        - v1-ewallet-prod-build-{{ checksum "mix.exs" }}
        - v1-ewallet-prod-build-

  restore_docker_image: &restore_docker_image
    restore_cache:
      name: Restoring Docker image artifacts from cache
      keys:
        - v1-docker-image-{{ checksum "Dockerfile" }}
        - v1-docker-image-

  attach_workspace: &attach_workspace
    attach_workspace:
      name: Attaching workspace
      at: /tmp/workspace


jobs:
  checkout_code:
    <<: *defaults
    steps:
      - *restore_repo
      - checkout
      - save_cache:
          name: Saving repository
          key: v1-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .

  build_test:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_test_build
      - run:
          name: Retrieving eWallet dependencies
          command: |
            set -xe
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find deps/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            make deps-ewallet
      - save_cache:
          name: Caching eWallet dependencies
          key: v1-ewallet-deps-{{ checksum "mix.lock" }}
          paths:
            - deps
      - run:
          name: Building eWallet in test environment
          command: |
            set -xe
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find _build/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            make build-test
      - save_cache:
          name: Caching eWallet test artifacts
          key: v1-ewallet-test-build-{{ checksum "mix.exs" }}
          paths:
            - _build/test

  lint_format:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_test_build
      - run:
          name: Checking code formattings
          command: |
            set +xe
            make check-format

  lint_credo:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_test_build
      - run:
          name: Checking credo
          command: |
            set -xe
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find deps/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            find _build/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            make check-credo
          environment:
            MIX_ENV: test

  test_ewallet:
    <<: *defaults
    docker:
      - image: omisegoimages/ewallet-builder:stable
      - image: postgres:9.6-alpine
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_test_build
      - run:
          name: Running eWallet tests
          command: |
            set -xe
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find deps/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            find _build/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            # TODO: Remove me after done testing pipeline.
            make test-ewallet || true
          environment:
            DATABASE_URL: postgresql://postgres:@localhost:5432/ewallet
            LOCAL_LEDGER_DATABASE_URL: postgresql://postgres:@localhost:5432/ledger
            USE_JUNIT: 1
            MIX_ENV: test

  test_assets:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_assets_deps
      - run:
          name: Retriving eWallet assets dependencies
          command: |
            set -xe
            make deps-assets
      - save_cache:
          name: Caching eWallet assets dependencies
          key: v1-ewallet-assets-deps-{{ checksum "apps/admin_panel/assets/yarn.lock" }}
          paths:
            - apps/admin_panel/assets/node_modules
      - run:
          name: Running assets tests
          command: |
            set -xe
            make test-assets

  build_ewallet:
    <<: *defaults
    steps:
      - *restore_repo
      - *restore_ewallet_deps
      - *restore_ewallet_assets_deps
      - *restore_ewallet_prod_build
      - setup_remote_docker
      - run:
          name: Building eWallet in production environment
          command: |
            set -xe
            # Force rebuilding bcrypt_elixir otherwise it's gonna fail loading NIFs
            find deps/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            find _build/ -name bcrypt_elixir -print0 | xargs -0 rm -rf || true
            make build-prod
      - save_cache:
          name: Caching eWallet artifacts
          key: v1-ewallet-prod-build-{{ checksum "mix.exs" }}
          paths:
            - _build/prod/.mix
            - _build/prod/consolidated
            - _build/prod/lib
      - *restore_docker_image
      - run:
          name: Building Docker image
          command: |
            set -xe
            docker load -i ~/caches/docker-layers.tar || true
            make docker-build IMAGE_NAME=$IMAGE_NAME
            mkdir -p ~/caches /tmp/workspace
            docker save -o ~/caches/docker-layers.tar "$IMAGE_NAME"
            docker save -o /tmp/workspace/docker-image.tar "$IMAGE_NAME"
      - save_cache:
          name: Saving Docker image layer cache
          paths:
            - ~/caches/docker-layers.tar
          key: v1-docker-image-{{ checksum "Dockerfile" }}
      - persist_to_workspace:
          name: Persisting workspace
          root: /tmp/workspace
          paths:
            - docker-image.tar

  test_ewallet_e2e:
    <<: *defaults
    steps:
      - setup_remote_docker
      - *restore_repo
      - *attach_workspace
      - run:
          name: Preparing E2E environments
          command: |
            set -xe

            docker load -i /tmp/workspace/docker-image.tar
            docker network create net0
            cd vendor/docker/

            sh generate-override.sh -i "$IMAGE_NAME" -n net0 > docker-compose.override.yml
            docker-compose up -d

            ( \
              printf "#!/bin/sh\\n"
              printf "export E2E_TEST_ADMIN_EMAIL=%s@example.com\\n"   $(openssl rand -hex 4)
              printf "export E2E_TEST_ADMIN_PASSWORD=%s\\n"            $(openssl rand -base64 24 | tr '+/' '-_')
              printf "export E2E_TEST_ADMIN_1_EMAIL=%s@example.com\\n" $(openssl rand -hex 4)
              printf "export E2E_TEST_ADMIN_1_PASSWORD=%s\\n"          $(openssl rand -base64 24 | tr '+/' '-_')
            ) > ~/credentials.sh
            . ~/credentials.sh

            docker-compose run --rm ewallet bin/ewallet initdb
            docker-compose run --rm \
                -e E2E_ENABLED=yes \
                -e E2E_TEST_ADMIN_EMAIL="$E2E_TEST_ADMIN_EMAIL" \
                -e E2E_TEST_ADMIN_PASSWORD="$E2E_TEST_ADMIN_PASSWORD" \
                -e E2E_TEST_ADMIN_1_EMAIL="$E2E_TEST_ADMIN_1_EMAIL" \
                -e E2E_TEST_ADMIN_1_PASSWORD="$E2E_TEST_ADMIN_1_PASSWORD" \
              ewallet \
              bin/ewallet seed -e
      - run:
          name: Running E2E tests
          command: |
            set -xe
            . ~/credentials.sh

            # Primary container cannot connect directly to the Docker-in-Docker instance.
            # We need to spawn another image to do so.
            git clone https://github.com/omisego/e2e.git ~/e2e
            docker create -v /src --name srcs alpine:3.8 /bin/true
            docker cp ~/e2e srcs:/src

            docker run --rm \
                --init \
                --network net0 \
                --volumes-from srcs \
                -e E2E_HTTP_HOST="http://ewallet:4000" \
                -e E2E_SOCKET_HOST="ws://ewallet:4000" \
                -e E2E_TEST_ADMIN_EMAIL="$E2E_TEST_ADMIN_EMAIL" \
                -e E2E_TEST_ADMIN_PASSWORD="$E2E_TEST_ADMIN_PASSWORD" \
                -e E2E_TEST_ADMIN_1_EMAIL="$E2E_TEST_ADMIN_1_EMAIL" \
                -e E2E_TEST_ADMIN_1_PASSWORD="$E2E_TEST_ADMIN_1_PASSWORD" \
              omisegoimages/ewallet-builder:stable \
              sh -c "set -xe && \
                cd /src/e2e && \
                curl \$E2E_HTTP_HOST && \
                pipenv install && \
                pipenv run robot tests"

  publish_ewallet:
    <<: *defaults
    steps:
      - setup_remote_docker
      - *restore_repo
      - *attach_workspace
      - run:
          name: Logging into Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Publishing Docker image
          command: |
            set -xe
            docker load -i /tmp/workspace/docker-image.tar

            IMAGE_TAG=""
            if [ -n "$CIRCLE_TAG" ]; then
                _ver="${CIRCLE_TAG#*v}"

                # Given a v1.0.0-pre.1 tag, this will generate:
                # - 1.0
                # - 1.0.0-pre
                # - 1.0.0-pre.1
                while true; do
                    case "$_ver" in
                        *.* ) IMAGE_TAG="$_ver $IMAGE_TAG"; _ver="${_ver%.*}";;
                        * )   break;;
                    esac
                done

                # In case the commit is HEAD of master branch, also tag stable.
                if [ -n "$CIRCLE_REPOSITORY_URL" ] && [ -n "$CIRCLE_SHA1" ]; then
                    _ref="refs/heads/master"
                    _head="$(git ls-remote "$CIRCLE_REPOSITORY_URL" "$_ref" | awk '{ print $1 }')"
                    if [ "$CIRCLE_SHA1" = "$_head" ]; then
                        IMAGE_TAG="stable $IMAGE_TAG"
                    fi
                fi
            elif [ "$CIRCLE_BRANCH" = "master" ]; then
                IMAGE_TAG="dev"
                IMAGE_TAG="dev-$(git rev-parse --short HEAD) $IMAGE_TAG"
            fi

            for tag in $IMAGE_TAG; do
                docker tag "$IMAGE_NAME" "$IMAGE_NAME:$tag"
                docker push "$IMAGE_NAME:$tag"
            done


filters:
  only_develop: &only_develop
    filters:
      branches:
        ignore:
          - master

  only_mainline: &only_mainline
    filters:
      branches:
        only:
          - master
          - distillery-release
      tags:
        only: /^v.*/


workflows:
  version: 2
  test_build:
    jobs:
      - checkout_code
      - build_test:
          requires:
            - checkout_code

      - lint_format:
          <<: *only_develop
          requires:
            - build_test
      - lint_credo:
          <<: *only_develop
          requires:
            - build_test

      - test_ewallet:
          requires:
            - build_test
      - test_assets:
          requires:
            - build_test

      - build_ewallet:
          <<: *only_mainline
          requires:
            - test_ewallet
            - test_assets
      - test_ewallet_e2e:
          <<: *only_mainline
          requires:
            - build_ewallet

      - publish_ewallet:
          <<: *only_mainline
          requires:
            - test_ewallet_e2e
